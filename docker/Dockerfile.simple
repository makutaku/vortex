# Simple root-less Dockerfile using traditional pip (no uv dependency)
# Follows security best practices by running as non-root user throughout
FROM python:3.11-slim

# Install system dependencies (supervisord instead of cron for security)
RUN apt-get update && apt-get install -y --no-install-recommends \
    supervisor \
    tini \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create vortex user and directories early
RUN groupadd -g 1000 vortex \
    && useradd -u 1000 -g 1000 -m -r vortex \
    && mkdir -p /data /config /home/vortex/.config/vortex /home/vortex/logs \
    && chown -R vortex:vortex /data /config /home/vortex

# Set working directory
WORKDIR /app

# Copy project files for dependency resolution (as root, then change ownership)
COPY pyproject.toml setup.py README.md ./
COPY src/ ./src/
COPY config/assets/ /app/config/assets/

# Install Python dependencies and fix permissions in combined layer
RUN pip install --no-cache-dir -e . \
    && chown -R vortex:vortex /app

# Copy entrypoint scripts and set permissions
COPY docker/entrypoint-simple.sh docker/ping.sh /app/
RUN chmod +x /app/entrypoint-simple.sh /app/ping.sh \
    && chown vortex:vortex /app/entrypoint-simple.sh /app/ping.sh

# Switch to vortex user for security
USER vortex

# Default environment variables (modern Vortex configuration)
ENV VORTEX_DEFAULT_PROVIDER=yahoo \
    VORTEX_OUTPUT_DIR=/data \
    VORTEX_SCHEDULE="0 8 * * *" \
    VORTEX_RUN_ON_STARTUP=true \
    VORTEX_DOWNLOAD_ARGS="--yes" \
    VORTEX_LOG_LEVEL=INFO \
    HOME=/home/vortex

# Volume mounts
VOLUME ["/data", "/config"]

# Container runs as vortex user consistently
# Uses supervisord for process management instead of system cron

# Use tini as init system with root-less entrypoint
ENTRYPOINT ["/usr/bin/tini", "--", "/app/entrypoint-simple.sh"]