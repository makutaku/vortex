# Simple Dockerfile using traditional pip (no uv dependency)
FROM python:3.11-slim

# Install system dependencies and clean up in single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    cron \
    tini \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory early
WORKDIR /app

# Copy dependency files first for better layer caching
COPY pyproject.toml setup.py README.md ./

# Install Python dependencies (change less frequently than source)
RUN pip install --no-cache-dir -e . --no-deps && \
    pip install --no-cache-dir \
    click>=8.0.0 \
    pydantic>=2.0.0 \
    requests>=2.25.0 \
    rich>=10.0.0 \
    python-dateutil>=2.8.0 \
    pytz>=2021.1 \
    pandas>=1.3.0 \
    yfinance>=0.2.0 \
    structlog>=21.0.0

# Copy source code and static assets (change more frequently)
COPY src/ ./src/
COPY docker/entrypoint.sh docker/ping.sh /app/
COPY assets/ /app/assets/

# Create user, directories, and set permissions in single layer
RUN useradd -m -r vortex \
    && mkdir -p /data /config \
    && chown -R vortex:vortex /app /data /config \
    && chmod +x /app/entrypoint.sh /app/ping.sh \
    && pip install --no-cache-dir -e . --no-deps

# Default environment variables (modern Vortex configuration)
ENV VORTEX_DEFAULT_PROVIDER=yahoo \
    VORTEX_OUTPUT_DIR=/data \
    VORTEX_SCHEDULE="0 8 * * *" \
    VORTEX_RUN_ON_STARTUP=true \
    VORTEX_DOWNLOAD_ARGS="--yes" \
    VORTEX_LOG_LEVEL=INFO

# Volume mounts
VOLUME ["/data", "/config"]

# Stay as root for cron, but set permissions
RUN chown -R vortex:vortex /app /data /config

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--", "/app/entrypoint.sh"]